1. npm init -y

2. npm i mongodb

3. npm i mongoose --save

4. Зареждаме mogoose
   const mongoose = require('mongoose');

5. Връзваме се към базата
async function start() {
  const connectionString = 'mongodb://localhost:27017/testdb';

  await mongoose.connect(connectionString);

  console.log('Database connected');
}

start();

При кънектване не се взема референция към нищо. Тук connect е void функия. Mongoose работи на singleton принципа. 
Това означава, че за цялото приложение можем да имаме само едина кънекшън. И без значение в кой модул импортираме
mongoole, стига някъде при инациализация да сме кънетнали, всички модули получават един и същи кънекшън. Не е нужно
да се пази някаква референция. Да се експортира и да се разнася из модулите. Т.е. можем да си го представим като 
статичен клас.
Това е полезно, т.к. нямаме юскейс в който да искаме да имаме повече от един кънекшън към база.
Ако имаме повече от една база това ще е различен вид база - на пример релационна.
Често срещано е да има повече от един тип бази в едно приложение.

6. Създаваме схема - т.е. модел на данните в базата

7. Валидатори - по принцип ще изключи полетата, които не съществуват. 
	Ако подадем грешен тип ще се опита да го парсне или ще хвърли грешка.
	Можем да закачаме някакви неща на отделните свойства като кажем: 
	 studentsSchema.path('firstName') - това хваща свойството и от там на татъка можем да го модифицираме по някакъв начин
	 едно от нещата, к. можем да кажем е .validate
	 personSchema.path('firstName').validate(function() {   // не трябва да е ламбда функция!!!
	    return this.firstName.length >= 2
	    && this.firstName.length <= 10;
	 }, 'First name must be between 2 and 0 symbol long!' );
  Валидираме в МОДЕЛА

8. Вградени валидатори - подаването става като в модела на пропъртито вместо тип подаваме обект:
   - Numbers - Min and Max
	age: {
	  type: Number,
	  min: 0,
	  max: 199
	}
   - required
   - Strings - enum, regex, minLength, maxLength
	= Вместо функцията от 7. можем да добави в обекта при дефиниране на пропъртито minLength, maxLength
   	= enum - е обект с пропърти values, в което подаваме масив от стойности. Ако подадена не е сред стойностите
		в масива, връща съобщението от пропърти message 
	= regex - 
9. CRUD
	


















